<?xml version="1.0"?>
<launch>
    <!-- Use this file to launch only sensors and motors at Embedded Board -->
    <!-- This file should launched at ROS Host PC -->
    <!-- Localization, EKF, Odometry Publisher, AMCL, Move_base node will be launched at remote PC using Master.launch -->

	<!-- Transformation Configuration -->
	<node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.085 0 0.22 0 0 0 base_link laser 10" />
	<node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.09 0 0 0 base_footprint base_link 10" />
	
	<!-- Launch IMU(Iahrs) -->
	<!-- Publish : /imu/data, TF to base_link -> laser -->
	<param name="m_bSingle_TF_option" type="bool" value="true" /> <!--false-->
	<node pkg="iahrs_driver" type="iahrs_driver" name="iahrs_driver" output="screen" />

	<!-- Launch Lidar(RPLidarA1) -->
	<!-- Publish : /scan -->
	<node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
	<param name="serial_port"         type="string" value="/dev/ttyRPLidar"/>
	<param name="serial_baudrate"     type="int"    value="115200"/>
	<param name="frame_id"            type="string" value="laser"/>
	<param name="inverted"            type="bool"   value="false"/>
	<param name="angle_compensate"    type="bool"   value="true"/>
	</node>

	<!-- Add laser_filter -->
	<node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laser_filter" output="screen">
    <rosparam command="load" file="$(find navstack)/param/scan_data_filter.yaml"/>
    </node>

	<!-- Disposal Part Controller -->
	<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyRosserial1"/>
    <param name="baud" value="115200"/>
    </node>

    <!-- Water Level Monitoring Part Controller -->
	<node pkg="rosserial_python" type="serial_node.py" name="serial_node">
    <param name="port" value="/dev/ttyRosserial2"/>
    <param name="baud" value="115200"/>
    </node>

	<!-- Launch Motor Driver(MD200T) -->
	<!-- Subscribe: /cmd_vel -->
	<!-- Publish : /right_ticks, /left_ticks -->
    <node pkg="md" type="md_robot_node" name="md_robot_node" output="screen">
    <param name = "use_MDUI"                    value = "0"/>       <!-- 0: not use MDUI, 1: use MDUI -->
    <param name = "wheel_radius"                value = "0.095"/>   <!-- unit: meter -->
    <param name = "wheel_length"                value = "0.047"/>   <!-- unit: meter -->
    <param name = "motor_pole"                  value = "8"/> 
    <param name = "reduction"                   value = "15"/> 
    <param name = "reverse_direction"           value = "0"/>       <!-- 0: forward, 1: reverse -->
    <param name = "maxrpm"                      value = "3000"/>    <!-- unit: RPM -->
    <param name = "motor_posi"                  value = "0"/>       <!-- motor pisition 0: hall sensor, 1: encoder -->
    <param name = "encoder_PPR"                 value = "16384"/>   <!-- if use encoder position, encoder PPR -->
    <param name = "position_proportion_gain"    value = "20"/>      <!-- reference PID 203(PID_GAIN) -->
    <param name = "speed_proportion_gain"       value = "50"/>      <!-- reference PID 203(PID_GAIN) -->
    <param name = "integral_gain"               value = "1800"/>    <!-- reference PID 203(PID_GAIN) -->
    <param name = "slow_start"                  value = "300"/>     <!-- unit: RPM. Set Velocity  -->	
    <param name = "slow_down"                   value = "300"/>     <!-- unit: RPM -->
	</node>

</launch>
